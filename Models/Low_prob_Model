{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Low_prob_Model","provenance":[],"collapsed_sections":[],"toc_visible":true,"authorship_tag":"ABX9TyPopTV5hLsqrrL4sXKKg7BV"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"TsWpRhE-VaKJ","executionInfo":{"status":"ok","timestamp":1602065448333,"user_tz":-330,"elapsed":2278,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"0a8e335e-4a84-4a14-d897-7385e38be29c","colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hdVgFPzwVjWd","executionInfo":{"status":"ok","timestamp":1602065449829,"user_tz":-330,"elapsed":3667,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"959e208e-6898-455f-d526-fbf85c898b95","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["cd /content/drive/My Drive/Applied\\ AI\\ course\\ Assignments/Case\\ Study\\ 1"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/Applied AI course Assignments/Case Study 1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"t3MzQ9mAhwqi","executionInfo":{"status":"ok","timestamp":1602065452130,"user_tz":-330,"elapsed":5905,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"71e76bcb-c807-4496-c0b0-df24d12ce993","colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["pip install bayesian-optimization"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: bayesian-optimization in /usr/local/lib/python3.6/dist-packages (1.2.0)\n","Requirement already satisfied: scipy>=0.14.0 in /usr/local/lib/python3.6/dist-packages (from bayesian-optimization) (1.4.1)\n","Requirement already satisfied: scikit-learn>=0.18.0 in /usr/local/lib/python3.6/dist-packages (from bayesian-optimization) (0.22.2.post1)\n","Requirement already satisfied: numpy>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from bayesian-optimization) (1.18.5)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.6/dist-packages (from scikit-learn>=0.18.0->bayesian-optimization) (0.16.0)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Q8ftsitrb9jf"},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from bayes_opt import BayesianOptimization\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import RandomizedSearchCV\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import StratifiedKFold, RepeatedKFold, KFold\n","\n","from sklearn.linear_model import BayesianRidge\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.linear_model import LinearRegression\n","from sklearn.linear_model import SGDRegressor\n","from sklearn.ensemble import RandomForestRegressor\n","\n","import lightgbm as lgb\n","import pickle\n","\n","from sklearn.metrics import f1_score\n","from sklearn.metrics import roc_curve, auc, accuracy_score, roc_auc_score, log_loss\n","\n","from sklearn.metrics import mean_squared_error\n","from math import sqrt\n","\n","import time\n","import gc\n","import warnings\n","warnings.filterwarnings('ignore')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"t4FiFE7ciUPG"},"source":["#https://www.kaggle.com/fabiendaniel/elo-world\n","#Function to load data into pandas and reduce memory usage\n","\n","def reduce_mem_usage(df, verbose=True):\n","    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n","    start_mem = df.memory_usage().sum() / 1024**2    \n","    for col in df.columns:\n","        col_type = df[col].dtypes\n","        if col_type in numerics:\n","            c_min = df[col].min()\n","            c_max = df[col].max()\n","            if str(col_type)[:3] == 'int':\n","                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n","                    df[col] = df[col].astype(np.int8)\n","                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n","                    df[col] = df[col].astype(np.int16)\n","                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n","                    df[col] = df[col].astype(np.int32)\n","                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n","                    df[col] = df[col].astype(np.int64)  \n","            else:\n","                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n","                    df[col] = df[col].astype(np.float16)\n","                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n","                    df[col] = df[col].astype(np.float32)\n","                else:\n","                    df[col] = df[col].astype(np.float64)    \n","    end_mem = df.memory_usage().sum() / 1024**2\n","    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) / start_mem))\n","    return df"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dm_kw5QTkc2A"},"source":["# Loading the data"]},{"cell_type":"code","metadata":{"id":"CRHFxazdiZf8","executionInfo":{"status":"ok","timestamp":1602065486026,"user_tz":-330,"elapsed":39639,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"4fa23f2d-0966-4e69-aff4-b81d901ca666","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["train = reduce_mem_usage(pd.read_csv('New_Data_processed/train_features_without_merchant.csv', index_col=0))\n","test = reduce_mem_usage(pd.read_csv('New_Data_processed/test_features_without_merchant.csv', index_col=0))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mem. usage decreased to 99.94 Mb (71.4% reduction)\n","Mem. usage decreased to 62.01 Mb (70.9% reduction)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"o-fW9ulxv3cj","executionInfo":{"status":"ok","timestamp":1602065486028,"user_tz":-330,"elapsed":39584,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"7c341b8b-3956-4b8b-d881-4bfa497c2ec3","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["train.isna().sum().any()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":182}]},{"cell_type":"code","metadata":{"id":"eoDqyuKOv6is","executionInfo":{"status":"ok","timestamp":1602065486030,"user_tz":-330,"elapsed":39528,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"e057920d-8f06-4b11-d163-7d9f100c28a6","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["test.isna().any().sum() #target variable is Nan"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{"tags":[]},"execution_count":183}]},{"cell_type":"code","metadata":{"id":"vjeXis7bv-v1"},"source":["test['new_purchase_date_diff_now'].fillna(test['new_purchase_date_diff_now'].mode()[0], inplace=True) \n","test['new_last_buy'].fillna(test['new_last_buy'].mode()[0], inplace=True) "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ESTDgOhbv_Tk","executionInfo":{"status":"ok","timestamp":1602065486379,"user_tz":-330,"elapsed":39777,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"395c4588-48aa-405e-fd01-aaebab767b08","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["test.columns[test.isna().any()]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['target'], dtype='object')"]},"metadata":{"tags":[]},"execution_count":185}]},{"cell_type":"code","metadata":{"id":"4L5C2z6JTiez"},"source":["## Load the predicted labels from Binary Classification Model\n","\n","with open('Binary_Classification_predictions/predicted_labels_train.pkl','rb') as f:\n","  train_labels = pickle.load(f)\n","\n","with open('Binary_Classification_predictions/predicted_labels_test.pkl','rb') as f:\n","  test_labels = pickle.load(f)\n","\n","\n","with open('Binary_Classification_predictions/prob_labels_train.pkl', 'rb') as f:\n","  train_prob = pickle.load(f)\n","\n","with open('Binary_Classification_predictions/prob_labels_test.pkl', 'rb') as f:\n","  test_prob = pickle.load(f)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Lfs-4h_-e5e1"},"source":["train['outlier_prob'] = train_prob\n","train['outlier_pred'] = train_labels\n","test['outlier_prob'] = test_prob\n","test['outlier_pred'] = test_labels"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wyBxHNLCb5dT","executionInfo":{"status":"ok","timestamp":1602065486383,"user_tz":-330,"elapsed":39650,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"41b28e2a-92ea-4392-8e1e-8db616568ca1","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["train.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 201917 entries, 0 to 201916\n","Columns: 228 entries, card_id to outlier_pred\n","dtypes: float16(172), float32(5), float64(11), int16(15), int32(2), int64(1), int8(21), object(1)\n","memory usage: 103.0+ MB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"S7shW3fi-ZPE","executionInfo":{"status":"ok","timestamp":1602065486385,"user_tz":-330,"elapsed":39588,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"62a790d8-7551-491b-b4e7-fb076adb3e9e","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["test.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 123623 entries, 0 to 123622\n","Columns: 227 entries, card_id to outlier_pred\n","dtypes: float16(171), float32(8), float64(11), int16(12), int32(3), int64(1), int8(20), object(1)\n","memory usage: 63.9+ MB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vOQY997tOvCE"},"source":["train_card_ids = train['card_id']\n","train_target = train['target']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"L1PQ_6FM0SUG"},"source":["test_card_ids = test['card_id']\n","test.drop(columns=['card_id', 'target'], axis=1, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UfQzroyvRiKx"},"source":["# Low Prob Model"]},{"cell_type":"code","metadata":{"id":"fznvEKhwRmxl","executionInfo":{"status":"ok","timestamp":1602065486824,"user_tz":-330,"elapsed":39874,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"b9e8dfa2-ba73-4b53-ada3-8dbbb24a9799","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["# Create the dataset for training and test\n","\n","low_prob_data = train[train['outlier_pred'] == 0]\n","low_prob_data.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 179086 entries, 0 to 201916\n","Columns: 228 entries, card_id to outlier_pred\n","dtypes: float16(172), float32(5), float64(11), int16(15), int32(2), int64(1), int8(21), object(1)\n","memory usage: 91.4+ MB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"42nZIpfu6bFz","executionInfo":{"status":"ok","timestamp":1602065486826,"user_tz":-330,"elapsed":39810,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"dc33fcac-e01c-4fd9-99bd-ec24f3b51bbb","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["rare_outliers = low_prob_data[low_prob_data['rare_datapoints'] == 1]\n","rare_outliers.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 618 entries, 64 to 201262\n","Columns: 228 entries, card_id to outlier_pred\n","dtypes: float16(172), float32(5), float64(11), int16(15), int32(2), int64(1), int8(21), object(1)\n","memory usage: 322.9+ KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OvzEebU1Uex0"},"source":["low_prob_data = low_prob_data[low_prob_data['rare_datapoints'] == 0]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"V_5qw-q6Vbrm","executionInfo":{"status":"ok","timestamp":1602065486829,"user_tz":-330,"elapsed":39706,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"ae60d54b-96e1-437d-d41c-305de94a6e0c","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["low_prob_data.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 178468 entries, 0 to 201916\n","Columns: 228 entries, card_id to outlier_pred\n","dtypes: float16(172), float32(5), float64(11), int16(15), int32(2), int64(1), int8(21), object(1)\n","memory usage: 91.1+ MB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"540lecxeWE9O"},"source":["rare_outliers = rare_outliers.sample(10)\n","low_prob_data = low_prob_data.append(rare_outliers, ignore_index=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"G39eIZp6WyBp","executionInfo":{"status":"ok","timestamp":1602065487310,"user_tz":-330,"elapsed":40079,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"0be1efc6-806a-4797-9692-76f56fb93163","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["low_prob_data.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 178478 entries, 0 to 178477\n","Columns: 228 entries, card_id to outlier_pred\n","dtypes: float16(172), float32(5), float64(11), int16(15), int32(2), int64(1), int8(21), object(1)\n","memory usage: 89.7+ MB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ldrWbwee8t7v","executionInfo":{"status":"ok","timestamp":1602065487311,"user_tz":-330,"elapsed":40038,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"78c34734-0ed9-4b98-bf1d-86997500db11","colab":{"base_uri":"https://localhost:8080/","height":221}},"source":["low_prob_data['target'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":[" 0.000000    1336\n"," 1.000000     107\n","-1.000000      69\n","-1.003906      47\n","-1.027344      45\n","             ... \n","-0.009956       1\n"," 0.091797       1\n"," 0.003220       1\n"," 0.034180       1\n"," 0.005840       1\n","Name: target, Length: 19010, dtype: int64"]},"metadata":{"tags":[]},"execution_count":198}]},{"cell_type":"code","metadata":{"id":"Xs_Q9_n29HzI"},"source":["y_low_prob = low_prob_data['target']\n","low_prob_card_ids = low_prob_data['card_id']\n","low_prob_data.drop(columns=['card_id', 'target', 'rare_datapoints', 'outlier_pred', 'outlier_prob'], axis=1, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bozwceOIPrEU"},"source":["train.drop(columns=['card_id', 'target', 'rare_datapoints', 'outlier_pred', 'outlier_prob'], axis=1, inplace=True)\n","test.drop(columns=['outlier_pred', 'outlier_prob'], axis=1, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aDz18Pp--K7F"},"source":["low_prob_data.reset_index(drop=True, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1S0etjon9BVj"},"source":["### LGBM Model:"]},{"cell_type":"code","metadata":{"id":"06l2r5XXelHG"},"source":["def LGB_CV(\n","          max_depth,\n","          num_leaves,\n","          min_data_in_leaf,\n","          feature_fraction,\n","          bagging_fraction,\n","          lambda_l1,\n","          n_estimators,\n","          colsample_bytree,\n","          subsample,\n","          reg_alpha,\n","          top_rate,\n","          min_split_gain,\n","          min_child_weight \n","         ):\n","    \n","    folds = KFold(n_splits=5, shuffle=True, random_state=15)\n","    oof = np.zeros(low_prob_data.shape[0])\n","\n","    for fold_, (trn_idx, val_idx) in enumerate(folds.split(low_prob_data, y_low_prob)):\n","      print(\"fold n°{}\".format(fold_))\n","      trn_data = lgb.Dataset(low_prob_data.iloc[trn_idx],\n","                              label=y_low_prob.iloc[trn_idx],\n","                              )\n","      val_data = lgb.Dataset(low_prob_data.iloc[val_idx],\n","                              label=y_low_prob.iloc[val_idx],\n","                              )\n","      params ={\n","                'n_estimators':int(n_estimators),\n","                'num_leaves': int(num_leaves),\n","                'min_data_in_leaf': int(min_data_in_leaf), \n","                'objective':'regression',\n","                'max_depth': int(max_depth),\n","                'learning_rate': 0.01,\n","                \"boosting\": \"gbdt\",\n","                \"subsample\": subsample,\n","                \"min_child_weight\": min_child_weight,\n","                \"min_split_gain\": min_split_gain,\n","                \"reg_alpha\": reg_alpha,\n","                \"top_rate\": top_rate,\n","                \"feature_fraction\": feature_fraction,\n","                \"bagging_freq\": 1,\n","                \"bagging_fraction\": bagging_fraction,\n","                \"colsample_bytree\": colsample_bytree,\n","                \"metric\": 'rmse',\n","                \"lambda_l1\": lambda_l1,\n","                \"verbosity\": -1,\n","                \"seed\":int(2**fold_),\n","                \"bagging_seed\":int(2**fold_),\n","                \"drop_seed\":int(2**fold_)\n","              }\n","\n","      clf = lgb.train(params,\n","                      trn_data,\n","                      10000,\n","                      valid_sets = [trn_data, val_data],\n","                      verbose_eval=500,\n","                      early_stopping_rounds = 200,\n","                      )\n","\n","      oof[val_idx] = clf.predict(low_prob_data.iloc[val_idx],\n","                                  num_iteration=clf.best_iteration)\n","\n","      del clf, trn_idx, val_idx\n","      gc.collect()\n","        \n","    return -mean_squared_error(oof, y_low_prob)**0.5"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6uZJcKHufbb2"},"source":["LGB_BO = BayesianOptimization(LGB_CV, {\n","    'max_depth': (4, 10),\n","    'num_leaves': (5, 130),\n","    'min_data_in_leaf': (10, 150),\n","    'feature_fraction': (0.7, 1.0),\n","    'n_estimators' : (10, 1000),\n","    'bagging_fraction': (0.7, 1.0),\n","    'lambda_l1': (0, 6),\n","    'top_rate': (0, 1),\n","    'subsample': (0, 1),\n","    'colsample_bytree': (0, 1),\n","    'reg_alpha': (0, 1),\n","    'min_split_gain': (1,50),\n","    'min_child_weight': (1, 150)\n","    })"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xoqGHqPUfcP7","executionInfo":{"status":"error","timestamp":1601917686278,"user_tz":-330,"elapsed":3527946,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"d50f19f9-39cb-4055-e17e-2bb88146f27c","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["start_time = time.time()\n","with warnings.catch_warnings():\n","    warnings.filterwarnings('ignore')\n","    LGB_BO.maximize(init_points=2, n_iter=20, acq='ei', xi=0.0)\n","print(\"Time taken: {} minutes\".format(time.time()-start_time))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["|   iter    |  target   | baggin... | colsam... | featur... | lambda_l1 | max_depth | min_ch... | min_da... | min_sp... | n_esti... | num_le... | reg_alpha | subsample | top_rate  |\n","-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n","fold n°0\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.38483\tvalid_1's rmse: 2.45727\n","Did not meet early stopping. Best iteration is:\n","[733]\ttraining's rmse: 2.3589\tvalid_1's rmse: 2.45666\n","fold n°1\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.39953\tvalid_1's rmse: 2.39678\n","Did not meet early stopping. Best iteration is:\n","[733]\ttraining's rmse: 2.37319\tvalid_1's rmse: 2.39568\n","fold n°2\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.36762\tvalid_1's rmse: 2.51309\n","Did not meet early stopping. Best iteration is:\n","[733]\ttraining's rmse: 2.34085\tvalid_1's rmse: 2.51298\n","fold n°3\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.36536\tvalid_1's rmse: 2.54065\n","Did not meet early stopping. Best iteration is:\n","[733]\ttraining's rmse: 2.34022\tvalid_1's rmse: 2.54012\n","fold n°4\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.3997\tvalid_1's rmse: 2.3949\n","Did not meet early stopping. Best iteration is:\n","[733]\ttraining's rmse: 2.37508\tvalid_1's rmse: 2.39357\n","| \u001b[0m 1       \u001b[0m | \u001b[0m-2.461   \u001b[0m | \u001b[0m 0.8651  \u001b[0m | \u001b[0m 0.5638  \u001b[0m | \u001b[0m 0.9917  \u001b[0m | \u001b[0m 2.153   \u001b[0m | \u001b[0m 9.138   \u001b[0m | \u001b[0m 146.8   \u001b[0m | \u001b[0m 35.86   \u001b[0m | \u001b[0m 11.1    \u001b[0m | \u001b[0m 733.8   \u001b[0m | \u001b[0m 54.22   \u001b[0m | \u001b[0m 0.1209  \u001b[0m | \u001b[0m 0.1386  \u001b[0m | \u001b[0m 0.6697  \u001b[0m |\n","fold n°0\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.39488\tvalid_1's rmse: 2.45731\n","Did not meet early stopping. Best iteration is:\n","[982]\ttraining's rmse: 2.35626\tvalid_1's rmse: 2.45614\n","fold n°1\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.40981\tvalid_1's rmse: 2.39734\n","Did not meet early stopping. Best iteration is:\n","[982]\ttraining's rmse: 2.37191\tvalid_1's rmse: 2.39526\n","fold n°2\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.37792\tvalid_1's rmse: 2.51383\n","Early stopping, best iteration is:\n","[729]\ttraining's rmse: 2.35688\tvalid_1's rmse: 2.51302\n","fold n°3\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.37417\tvalid_1's rmse: 2.54157\n","Early stopping, best iteration is:\n","[732]\ttraining's rmse: 2.35397\tvalid_1's rmse: 2.54034\n","fold n°4\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.40936\tvalid_1's rmse: 2.39672\n","Did not meet early stopping. Best iteration is:\n","[982]\ttraining's rmse: 2.371\tvalid_1's rmse: 2.39422\n","| \u001b[95m 2       \u001b[0m | \u001b[95m-2.461   \u001b[0m | \u001b[95m 0.7399  \u001b[0m | \u001b[95m 0.8644  \u001b[0m | \u001b[95m 0.8369  \u001b[0m | \u001b[95m 2.682   \u001b[0m | \u001b[95m 8.318   \u001b[0m | \u001b[95m 72.84   \u001b[0m | \u001b[95m 72.93   \u001b[0m | \u001b[95m 21.73   \u001b[0m | \u001b[95m 982.2   \u001b[0m | \u001b[95m 42.55   \u001b[0m | \u001b[95m 0.4571  \u001b[0m | \u001b[95m 0.5609  \u001b[0m | \u001b[95m 0.04201 \u001b[0m |\n","fold n°0\n","Training until validation scores don't improve for 200 rounds.\n","Did not meet early stopping. Best iteration is:\n","[15]\ttraining's rmse: 2.53361\tvalid_1's rmse: 2.53166\n","fold n°1\n","Training until validation scores don't improve for 200 rounds.\n","Did not meet early stopping. Best iteration is:\n","[15]\ttraining's rmse: 2.54726\tvalid_1's rmse: 2.47594\n","fold n°2\n","Training until validation scores don't improve for 200 rounds.\n","Did not meet early stopping. Best iteration is:\n","[15]\ttraining's rmse: 2.52074\tvalid_1's rmse: 2.58171\n","fold n°3\n","Training until validation scores don't improve for 200 rounds.\n","Did not meet early stopping. Best iteration is:\n","[15]\ttraining's rmse: 2.51373\tvalid_1's rmse: 2.60828\n","fold n°4\n","Training until validation scores don't improve for 200 rounds.\n","Did not meet early stopping. Best iteration is:\n","[15]\ttraining's rmse: 2.54852\tvalid_1's rmse: 2.47025\n","| \u001b[0m 3       \u001b[0m | \u001b[0m-2.534   \u001b[0m | \u001b[0m 0.7678  \u001b[0m | \u001b[0m 0.9988  \u001b[0m | \u001b[0m 0.9935  \u001b[0m | \u001b[0m 5.099   \u001b[0m | \u001b[0m 5.56    \u001b[0m | \u001b[0m 4.665   \u001b[0m | \u001b[0m 140.1   \u001b[0m | \u001b[0m 35.41   \u001b[0m | \u001b[0m 15.25   \u001b[0m | \u001b[0m 73.42   \u001b[0m | \u001b[0m 0.5939  \u001b[0m | \u001b[0m 0.3207  \u001b[0m | \u001b[0m 0.5276  \u001b[0m |\n","fold n°0\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.36509\tvalid_1's rmse: 2.45615\n","Early stopping, best iteration is:\n","[769]\ttraining's rmse: 2.33783\tvalid_1's rmse: 2.45567\n","fold n°1\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.37752\tvalid_1's rmse: 2.39599\n","Early stopping, best iteration is:\n","[690]\ttraining's rmse: 2.35647\tvalid_1's rmse: 2.39523\n","fold n°2\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.34491\tvalid_1's rmse: 2.51162\n","Early stopping, best iteration is:\n","[656]\ttraining's rmse: 2.32671\tvalid_1's rmse: 2.51156\n","fold n°3\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.34231\tvalid_1's rmse: 2.53935\n","Early stopping, best iteration is:\n","[765]\ttraining's rmse: 2.31591\tvalid_1's rmse: 2.53894\n","fold n°4\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.38063\tvalid_1's rmse: 2.39308\n","Did not meet early stopping. Best iteration is:\n","[993]\ttraining's rmse: 2.3351\tvalid_1's rmse: 2.39249\n","| \u001b[95m 4       \u001b[0m | \u001b[95m-2.459   \u001b[0m | \u001b[95m 0.9766  \u001b[0m | \u001b[95m 0.3146  \u001b[0m | \u001b[95m 0.7218  \u001b[0m | \u001b[95m 5.94    \u001b[0m | \u001b[95m 8.016   \u001b[0m | \u001b[95m 141.0   \u001b[0m | \u001b[95m 20.37   \u001b[0m | \u001b[95m 2.431   \u001b[0m | \u001b[95m 993.4   \u001b[0m | \u001b[95m 108.0   \u001b[0m | \u001b[95m 0.3019  \u001b[0m | \u001b[95m 0.1544  \u001b[0m | \u001b[95m 0.07852 \u001b[0m |\n","fold n°0\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.45313\tvalid_1's rmse: 2.46512\n","Did not meet early stopping. Best iteration is:\n","[990]\ttraining's rmse: 2.43355\tvalid_1's rmse: 2.45968\n","fold n°1\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.46818\tvalid_1's rmse: 2.4053\n","Did not meet early stopping. Best iteration is:\n","[990]\ttraining's rmse: 2.44856\tvalid_1's rmse: 2.39931\n","fold n°2\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.43873\tvalid_1's rmse: 2.51892\n","Did not meet early stopping. Best iteration is:\n","[990]\ttraining's rmse: 2.41799\tvalid_1's rmse: 2.51462\n","fold n°3\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.43134\tvalid_1's rmse: 2.54699\n","Did not meet early stopping. Best iteration is:\n","[990]\ttraining's rmse: 2.41211\tvalid_1's rmse: 2.54226\n","fold n°4\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.46796\tvalid_1's rmse: 2.40374\n","Did not meet early stopping. Best iteration is:\n","[990]\ttraining's rmse: 2.44859\tvalid_1's rmse: 2.3978\n","| \u001b[0m 5       \u001b[0m | \u001b[0m-2.463   \u001b[0m | \u001b[0m 0.998   \u001b[0m | \u001b[0m 0.4796  \u001b[0m | \u001b[0m 0.9691  \u001b[0m | \u001b[0m 0.738   \u001b[0m | \u001b[0m 6.105   \u001b[0m | \u001b[0m 148.1   \u001b[0m | \u001b[0m 53.85   \u001b[0m | \u001b[0m 19.1    \u001b[0m | \u001b[0m 990.0   \u001b[0m | \u001b[0m 12.43   \u001b[0m | \u001b[0m 0.1975  \u001b[0m | \u001b[0m 0.4769  \u001b[0m | \u001b[0m 0.8494  \u001b[0m |\n","fold n°0\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.43078\tvalid_1's rmse: 2.46441\n","Did not meet early stopping. Best iteration is:\n","[832]\ttraining's rmse: 2.40745\tvalid_1's rmse: 2.4616\n","fold n°1\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.44629\tvalid_1's rmse: 2.40189\n","Did not meet early stopping. Best iteration is:\n","[832]\ttraining's rmse: 2.4221\tvalid_1's rmse: 2.39742\n","fold n°2\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.41567\tvalid_1's rmse: 2.51579\n","Did not meet early stopping. Best iteration is:\n","[832]\ttraining's rmse: 2.38968\tvalid_1's rmse: 2.51324\n","fold n°3\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.41014\tvalid_1's rmse: 2.54646\n","Did not meet early stopping. Best iteration is:\n","[832]\ttraining's rmse: 2.38724\tvalid_1's rmse: 2.54326\n","fold n°4\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.44456\tvalid_1's rmse: 2.40248\n","Did not meet early stopping. Best iteration is:\n","[832]\ttraining's rmse: 2.41969\tvalid_1's rmse: 2.3984\n","| \u001b[0m 6       \u001b[0m | \u001b[0m-2.463   \u001b[0m | \u001b[0m 0.8089  \u001b[0m | \u001b[0m 0.9165  \u001b[0m | \u001b[0m 0.7948  \u001b[0m | \u001b[0m 1.124   \u001b[0m | \u001b[0m 5.688   \u001b[0m | \u001b[0m 9.493   \u001b[0m | \u001b[0m 12.14   \u001b[0m | \u001b[0m 26.92   \u001b[0m | \u001b[0m 832.0   \u001b[0m | \u001b[0m 17.69   \u001b[0m | \u001b[0m 0.5129  \u001b[0m | \u001b[0m 0.8262  \u001b[0m | \u001b[0m 0.7065  \u001b[0m |\n","fold n°0\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.43673\tvalid_1's rmse: 2.45945\n","Did not meet early stopping. Best iteration is:\n","[894]\ttraining's rmse: 2.42906\tvalid_1's rmse: 2.45726\n","fold n°1\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.45148\tvalid_1's rmse: 2.39994\n","Did not meet early stopping. Best iteration is:\n","[894]\ttraining's rmse: 2.4436\tvalid_1's rmse: 2.39744\n","fold n°2\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.42079\tvalid_1's rmse: 2.51424\n","Did not meet early stopping. Best iteration is:\n","[894]\ttraining's rmse: 2.41279\tvalid_1's rmse: 2.51286\n","fold n°3\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.41529\tvalid_1's rmse: 2.54371\n","Did not meet early stopping. Best iteration is:\n","[837]\ttraining's rmse: 2.40855\tvalid_1's rmse: 2.54169\n","fold n°4\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.45143\tvalid_1's rmse: 2.39861\n","Did not meet early stopping. Best iteration is:\n","[871]\ttraining's rmse: 2.44404\tvalid_1's rmse: 2.39617\n","| \u001b[0m 7       \u001b[0m | \u001b[0m-2.462   \u001b[0m | \u001b[0m 0.8695  \u001b[0m | \u001b[0m 0.3362  \u001b[0m | \u001b[0m 0.9278  \u001b[0m | \u001b[0m 2.532   \u001b[0m | \u001b[0m 5.113   \u001b[0m | \u001b[0m 134.3   \u001b[0m | \u001b[0m 141.3   \u001b[0m | \u001b[0m 45.43   \u001b[0m | \u001b[0m 894.4   \u001b[0m | \u001b[0m 124.4   \u001b[0m | \u001b[0m 0.7394  \u001b[0m | \u001b[0m 0.1738  \u001b[0m | \u001b[0m 0.859   \u001b[0m |\n","fold n°0\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.35441\tvalid_1's rmse: 2.45556\n","Early stopping, best iteration is:\n","[551]\ttraining's rmse: 2.34757\tvalid_1's rmse: 2.4554\n","fold n°1\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.37015\tvalid_1's rmse: 2.39495\n","Did not meet early stopping. Best iteration is:\n","[857]\ttraining's rmse: 2.3268\tvalid_1's rmse: 2.39456\n","fold n°2\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.33729\tvalid_1's rmse: 2.51254\n","Early stopping, best iteration is:\n","[462]\ttraining's rmse: 2.3428\tvalid_1's rmse: 2.51242\n","fold n°3\n","Training until validation scores don't improve for 200 rounds.\n","[500]\ttraining's rmse: 2.33542\tvalid_1's rmse: 2.53966\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/bayes_opt/target_space.py\u001b[0m in \u001b[0;36mprobe\u001b[0;34m(self, params)\u001b[0m\n\u001b[1;32m    190\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 191\u001b[0;31m             \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cache\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0m_hashable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    192\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: (0.8078815666573197, 0.6681138043159969, 0.9512829334276913, 0.8225059257208667, 9.778822567377937, 15.497854700590198, 148.6648725542355, 2.5930611108833426, 857.1401765517505, 107.63769432730976, 0.4336924880473497, 0.46491174889338827, 0.8583754559519325)","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-53-d977bf7c3405>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcatch_warnings\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilterwarnings\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'ignore'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0mLGB_BO\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmaximize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minit_points\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_iter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0macq\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'ei'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxi\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Time taken: {} minutes\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mstart_time\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/bayes_opt/bayesian_optimization.py\u001b[0m in \u001b[0;36mmaximize\u001b[0;34m(self, init_points, n_iter, acq, kappa, kappa_decay, kappa_decay_delay, xi, **gp_params)\u001b[0m\n\u001b[1;32m    183\u001b[0m                 \u001b[0miteration\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 185\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprobe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_probe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlazy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    186\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_bounds_transformer\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/bayes_opt/bayesian_optimization.py\u001b[0m in \u001b[0;36mprobe\u001b[0;34m(self, params, lazy)\u001b[0m\n\u001b[1;32m    114\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_queue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 116\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_space\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprobe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    117\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mEvents\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOPTIMIZATION_STEP\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/bayes_opt/target_space.py\u001b[0m in \u001b[0;36mprobe\u001b[0;34m(self, params)\u001b[0m\n\u001b[1;32m    192\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    193\u001b[0m             \u001b[0mparams\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_keys\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 194\u001b[0;31m             \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtarget_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    195\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    196\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-51-c28ee170d5f8>\u001b[0m in \u001b[0;36mLGB_CV\u001b[0;34m(max_depth, num_leaves, min_data_in_leaf, feature_fraction, bagging_fraction, lambda_l1, n_estimators, colsample_bytree, subsample, reg_alpha, top_rate, min_split_gain, min_child_weight)\u001b[0m\n\u001b[1;32m     56\u001b[0m                       \u001b[0mvalid_sets\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtrn_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_data\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m                       \u001b[0mverbose_eval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m500\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 58\u001b[0;31m                       \u001b[0mearly_stopping_rounds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m200\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     59\u001b[0m                       )\n\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/lightgbm/engine.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(params, train_set, num_boost_round, valid_sets, valid_names, fobj, feval, init_model, feature_name, categorical_feature, early_stopping_rounds, evals_result, verbose_eval, learning_rates, keep_training_booster, callbacks)\u001b[0m\n\u001b[1;32m    222\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mvalid_sets\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    223\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_valid_contain_train\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 224\u001b[0;31m                 \u001b[0mevaluation_result_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbooster\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval_train\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeval\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    225\u001b[0m             \u001b[0mevaluation_result_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbooster\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval_valid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeval\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    226\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/lightgbm/basic.py\u001b[0m in \u001b[0;36meval_train\u001b[0;34m(self, feval)\u001b[0m\n\u001b[1;32m   1956\u001b[0m             \u001b[0mList\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mevaluation\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1957\u001b[0m         \"\"\"\n\u001b[0;32m-> 1958\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__inner_eval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__train_data_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeval\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1959\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1960\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0meval_valid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/lightgbm/basic.py\u001b[0m in \u001b[0;36m__inner_eval\u001b[0;34m(self, data_name, data_idx, feval)\u001b[0m\n\u001b[1;32m   2362\u001b[0m                 \u001b[0mctypes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mc_int\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_idx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2363\u001b[0m                 \u001b[0mctypes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbyref\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtmp_out_len\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2364\u001b[0;31m                 result.ctypes.data_as(ctypes.POINTER(ctypes.c_double))))\n\u001b[0m\u001b[1;32m   2365\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtmp_out_len\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__num_inner_eval\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2366\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Wrong length of eval results\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"LzhKb4SavDfa","executionInfo":{"status":"ok","timestamp":1601917732043,"user_tz":-330,"elapsed":1333,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"100ab98a-f020-4cda-e9d2-80649234be07","colab":{"base_uri":"https://localhost:8080/","height":105}},"source":["print('-'*130)\n","print('Final Results')\n","print('Maximum  value: %f' % LGB_BO.max['target'])\n","print('Best  parameters: ', LGB_BO.max['params'])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["----------------------------------------------------------------------------------------------------------------------------------\n","Final Results\n","Maximum  value: -2.459492\n","Best  parameters:  {'bagging_fraction': 0.9765752680813031, 'colsample_bytree': 0.3146062805696692, 'feature_fraction': 0.721840870317305, 'lambda_l1': 5.94000904945001, 'max_depth': 8.015844615741223, 'min_child_weight': 141.0050760288474, 'min_data_in_leaf': 20.37122877267638, 'min_split_gain': 2.430852268248738, 'n_estimators': 993.4152759170602, 'num_leaves': 108.01137484813162, 'reg_alpha': 0.3018795081848139, 'subsample': 0.15441783622132732, 'top_rate': 0.07851563878214285}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ZfjIedNOYTJ-"},"source":["### Training with best params:"]},{"cell_type":"code","metadata":{"id":"lc4OzPH38-PX","executionInfo":{"status":"ok","timestamp":1602065836566,"user_tz":-330,"elapsed":37491,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"ccda891e-de8c-44ce-fcd9-1c4d75347e26","colab":{"base_uri":"https://localhost:8080/","height":731}},"source":["params = {\n","          'bagging_fraction': 0.9765752680813031, \n","          'colsample_bytree': 0.3146062805696692, \n","          'feature_fraction': 0.721840870317305, \n","          'lambda_l1': 5.94000904945001, \n","          'max_depth': 8,\n","          'min_child_weight': 141.0050760288474, \n","          'min_data_in_leaf': 20,\n","          'min_split_gain': 2.430852268248738, \n","          'n_estimators': 993,\n","          'num_leaves': 108,\n","          'reg_alpha': 0.3018795081848139, \n","          'subsample': 0.15441783622132732, \n","          'top_rate': 0.07851563878214285,\n","          'metric': 'rmse'\n","          }\n","\n","feature_importance_df = pd.DataFrame()\n","columns = low_prob_data.columns\n","\n","folds = RepeatedKFold(n_splits=5, n_repeats=2, random_state=15)\n","oof = np.zeros(low_prob_data.shape[0])\n","train_preds = np.zeros(train.shape[0])\n","test_predictions_low_prob = np.zeros(len(test))\n","\n","for fold_, (trn_idx, val_idx) in enumerate(folds.split(low_prob_data, y_low_prob)):\n","  print(\"fold n°{}\".format(fold_))\n","  trn_data = lgb.Dataset(low_prob_data.iloc[trn_idx],\n","                          label=y_low_prob.iloc[trn_idx],\n","                          )\n","  val_data = lgb.Dataset(low_prob_data.iloc[val_idx],\n","                          label=y_low_prob.iloc[val_idx],\n","                          )\n","\n","  clf = lgb.train(params,\n","                  trn_data,\n","                  10000,\n","                  valid_sets = [trn_data, val_data],\n","                  verbose_eval=500,\n","                  early_stopping_rounds = 200,\n","                  )\n","\n","  oof[val_idx] = clf.predict(low_prob_data.iloc[val_idx],\n","                              num_iteration=clf.best_iteration)\n","  test_predictions_low_prob += clf.predict(test, num_iteration=clf.best_iteration) / (5*2)\n","  train_preds += clf.predict(train, num_iteration=clf.best_iteration) / (5*2)\n","\n","  fold_importance_df = pd.DataFrame()\n","  fold_importance_df[\"feature\"] = columns\n","  fold_importance_df[\"importance\"] = np.log1p(clf.feature_importance(importance_type='gain', iteration=clf.best_iteration))\n","  fold_importance_df[\"fold\"] = fold_ + 1\n","  feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n","\n","cv_rmse = sqrt(mean_squared_error(y_low_prob, oof))\n","print('*'*100)\n","print(\"CV RMSE: {:2.5f}\".format(cv_rmse))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["fold n°0\n","Training until validation scores don't improve for 200 rounds.\n","Early stopping, best iteration is:\n","[94]\ttraining's rmse: 1.43573\tvalid_1's rmse: 1.51273\n","fold n°1\n","Training until validation scores don't improve for 200 rounds.\n","Early stopping, best iteration is:\n","[110]\ttraining's rmse: 1.42855\tvalid_1's rmse: 1.52906\n","fold n°2\n","Training until validation scores don't improve for 200 rounds.\n","Early stopping, best iteration is:\n","[123]\ttraining's rmse: 1.41742\tvalid_1's rmse: 1.53143\n","fold n°3\n","Training until validation scores don't improve for 200 rounds.\n","Early stopping, best iteration is:\n","[70]\ttraining's rmse: 1.44981\tvalid_1's rmse: 1.52702\n","fold n°4\n","Training until validation scores don't improve for 200 rounds.\n","Early stopping, best iteration is:\n","[106]\ttraining's rmse: 1.43022\tvalid_1's rmse: 1.50485\n","fold n°5\n","Training until validation scores don't improve for 200 rounds.\n","Early stopping, best iteration is:\n","[101]\ttraining's rmse: 1.42879\tvalid_1's rmse: 1.51708\n","fold n°6\n","Training until validation scores don't improve for 200 rounds.\n","Early stopping, best iteration is:\n","[108]\ttraining's rmse: 1.4348\tvalid_1's rmse: 1.48743\n","fold n°7\n","Training until validation scores don't improve for 200 rounds.\n","Early stopping, best iteration is:\n","[72]\ttraining's rmse: 1.44897\tvalid_1's rmse: 1.51832\n","fold n°8\n","Training until validation scores don't improve for 200 rounds.\n","Early stopping, best iteration is:\n","[112]\ttraining's rmse: 1.42133\tvalid_1's rmse: 1.53971\n","fold n°9\n","Training until validation scores don't improve for 200 rounds.\n","Early stopping, best iteration is:\n","[89]\ttraining's rmse: 1.43324\tvalid_1's rmse: 1.5424\n","****************************************************************************************************\n","CV RMSE: 1.52112\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"T_dM--IsTJSa","executionInfo":{"status":"ok","timestamp":1602065836570,"user_tz":-330,"elapsed":131,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"24cb89a2-2747-446b-f43a-d91efc9983e2","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["cv_rmse = sqrt(mean_squared_error(train_preds, train_target))\n","print(\"Entire Train data RMSE: {:2.5f}\".format(cv_rmse))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Entire Train data RMSE: 3.79397\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"lrUnD75nYs3M"},"source":["# Evaluate the models on entire train data:"]},{"cell_type":"code","metadata":{"id":"L6TTsHhUDepm"},"source":["low_prob_train = pd.DataFrame()\n","low_prob_train['card_id'] = train_card_ids\n","low_prob_train['low_prob_score'] = train_preds"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dLl7d17NYz7w"},"source":["low_prob_test = pd.DataFrame()\n","low_prob_test['card_id'] = test_card_ids\n","low_prob_test['low_prob_score'] = test_predictions_low_prob"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"S9X3upg3xcNc"},"source":["with open('Low_and_High_prob_predictions/low_prob_test_predictions.pkl', 'wb') as f:\n","  pickle.dump(low_prob_test, f)\n","\n","with open('Low_and_High_prob_predictions/low_prob_train_predictions.pkl', 'wb') as f:\n","  pickle.dump(low_prob_train, f)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SeZmYZJZ-nGy","executionInfo":{"status":"ok","timestamp":1602065836578,"user_tz":-330,"elapsed":30187,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"1f3e48ef-3632-49ea-9f54-d9a4800e2c5b","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["low_prob_train.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>card_id</th>\n","      <th>low_prob_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>C_ID_92a2005557</td>\n","      <td>-0.207547</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>C_ID_3d0044924f</td>\n","      <td>0.304871</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C_ID_d639edf6cd</td>\n","      <td>0.717650</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>C_ID_186d6a6901</td>\n","      <td>0.176479</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>C_ID_cdbd2c0db2</td>\n","      <td>-0.151186</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           card_id  low_prob_score\n","0  C_ID_92a2005557       -0.207547\n","1  C_ID_3d0044924f        0.304871\n","2  C_ID_d639edf6cd        0.717650\n","3  C_ID_186d6a6901        0.176479\n","4  C_ID_cdbd2c0db2       -0.151186"]},"metadata":{"tags":[]},"execution_count":207}]},{"cell_type":"code","metadata":{"id":"0f1ya0CVSqdB","executionInfo":{"status":"ok","timestamp":1602065836581,"user_tz":-330,"elapsed":29142,"user":{"displayName":"RAJAT MALVIYA","photoUrl":"","userId":"12593217853674254022"}},"outputId":"f5dbb099-3e2e-4ee1-9ee1-5e0a281bb02e","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["low_prob_test.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>card_id</th>\n","      <th>low_prob_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>C_ID_0ab67a22ab</td>\n","      <td>-0.262093</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>C_ID_130fd0cbdd</td>\n","      <td>-0.157685</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C_ID_b709037bc5</td>\n","      <td>-0.769719</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>C_ID_d27d835a9f</td>\n","      <td>-0.075641</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>C_ID_2b5e3df5c2</td>\n","      <td>-0.767668</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           card_id  low_prob_score\n","0  C_ID_0ab67a22ab       -0.262093\n","1  C_ID_130fd0cbdd       -0.157685\n","2  C_ID_b709037bc5       -0.769719\n","3  C_ID_d27d835a9f       -0.075641\n","4  C_ID_2b5e3df5c2       -0.767668"]},"metadata":{"tags":[]},"execution_count":208}]}]}